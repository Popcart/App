# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# platform :ios do
#   desc "Push a new beta build to TestFlight"
#   lane :beta do
#     increment_build_number(xcodeproj: "Runner.xcodeproj")
#     build_app(workspace: "Runner.xcworkspace", scheme: "Runner")
#     upload_to_testflight
#   end
# end

# frozen_string_literal: true

# Ensure this file is in the ios/ directory of your Flutter project
platform :ios do
  #####################################################
  # Load App Store Connect API Key for authentication #
  #####################################################
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    key_id = ENV["APP_STORE_CONNECT_KEY_ID"]
    issuer_id = ENV["APP_STORE_CONNECT_ISSUER_ID"]
    key_content = ENV["APP_STORE_CONNECT_P8"]

    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      in_house: false # Set to true if using an in-house (enterprise) account
    )
  end

  #####################################################
  # Increment Build Number Based on TestFlight         #
  #####################################################
  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    # Fetch app identifier from Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    UI.user_error!("App identifier not found in Appfile") unless app_identifier

    # Hardcoded API key is insecure; consider using environment variables
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    UI.important("Using hardcoded API key. Move to environment variable for security.")

    current_version = get_version_number(
      target: "Runner" # Replace with your main target if different
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1)
    )
  end

  #####################################################
  # Prepare Signing Certificates and Profiles          #
  #####################################################
  desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    UI.user_error!("Team ID not found in Appfile") unless team_id

    # Hardcoded API key and password are insecure
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    keychain_password = "Aye5089mere@"
    UI.important("Using hardcoded API key and password. Move to environment variables for security.")

    keychain_name = "signing"

    # Delete existing keychain if it exists
    delete_keychain(
      name: keychain_name
    ) if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))

    # Create and configure a new keychain
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["CERTIFICATE_BASE64"],
      certificate_password: ENV["CERTIFICATE_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    ) unless ENV["CERTIFICATE_BASE64"].nil?

    # Fetch and install provisioning profiles
    sigh(
      adhoc: options[:adhoc],
      api_key: api_key,
      readonly: true
    )
  end

  #####################################################
  # Build the iOS App for Release                     #
  #####################################################
  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    UI.user_error!("App identifier not found in Appfile") unless app_identifier

    profile_name = "Popcart provision profile MarchX" # Update with your provisioning profile name
    output_name = "Popcart-iOS" # Name of the generated .ipa file
    export_method = "app-store" # Options: app-store, ad-hoc, enterprise, development

    # Disable automatic signing to ensure correct code signing identity
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ["Runner"], # Update if you have multiple targets
      code_sign_identity: "Apple Distribution", # Verify this matches your certificate
      bundle_identifier: app_identifier,
      profile_name: profile_name,
      build_configurations: ["Release"]
    )

    # Build the app using gym
    gym(
      scheme: "production", # Update with your scheme name
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => profile_name
        }
      }
    )
  end

  #####################################################
  # Upload to TestFlight/App Store Connect            #
  #####################################################
  desc "Upload to TestFlight / App Store Connect"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    UI.important("Using hardcoded API key. Move to environment variable for security.")

    deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # Skips HTML preview verification (useful for CI)
      run_precheck_before_submit: false # Not supported via ASC API yet
    )
  end

  #####################################################
  # Full Build and Upload Workflow                    #
  #####################################################
  desc "Build and upload to TestFlight"
  lane :ios_build_upload_testflight do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release
  end
end