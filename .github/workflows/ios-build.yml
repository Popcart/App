name: Publish to iOS App Store

# on:
#   pull_request:
#     branches:
#       - main
#     types:
#       - closed
on:
  push:
    branches:
      - main
      
jobs:
  ios-app-store:
    name: Publish to iOS app store
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_P8: ${{ secrets.APP_STORE_CONNECT_P8 }}
      CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
      MATCH_GIT_USERNAME: ${{ secrets.MATCH_GIT_USERNAME }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.variables.outputs.head_ref }}

      - name: Download Appstore Connect key
        id: app_store_connect_key
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: appstore_connect_key.p8
          encodedString: ${{ secrets.APP_STORE_CONNECT_P8 }}

      - name: Cache bundle dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'
          bundler-cache: true

      - name: Download bundle dependencies
        run: |
          cd ios
          gem install bundler
          bundle config path vendor/bundle
          bundle install

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.1"

      - name: Setup SSH for Match
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global core.sshCommand "ssh -i ~/.ssh/id_rsa"

      
      - name: Cache pub dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: Install Flutter Dependencies
        run: |
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock
          flutter pub get
          cd ios
          pod deintegrate
          pod cache clean --all
          
      - name: Pod Install
        working-directory: ios
        run: pod install --verbose
      

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Create assets/env directory
        run: mkdir -p assets/env
  
      - name: Create and populate env
        run: |
          echo "${{secrets.DEV_ENV_VARIABLE2}}" | base64 --decode > assets/env/development.env
          echo "${{secrets.STAG_ENV_VARIABLE2}}" | base64 --decode > assets/env/staging.env
          echo "${{secrets.PROD_ENV_VARIABLE2}}" | base64 --decode > assets/env/production.env

      - name: Run code generation
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build iOS via Fastlane
        run: |
          cd ios
          bundle exec fastlane ios_match
        env:
          MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
          MATCH_GIT_USERNAME: ${{ secrets.MATCH_GIT_USERNAME }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_CONNECT_KEY_FILE: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}

      - name: Release to App Store (manual testflight release)
        run: |
          cd ios
          bundle exec fastlane upload_testflight
        env:
          MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
          MATCH_GIT_USERNAME: ${{ secrets.MATCH_GIT_USERNAME }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_CONNECT_KEY_FILE: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}

      - name: Clean up Keychain and Provisioning Profiles
        if: always() # Runs even if previous steps fail
        run: |
          # Delete the keychain
          security delete-keychain build.keychain || true
          
          # Remove certificate and provisioning profile files
          rm -f ios/certificate.p12
          rm -f ios/profile.mobileprovision
          
          # Remove provisioning profiles from the library
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
          
          # Verify cleanup
          ls -la ios/
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "Directory cleaned or not found"

